security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        # Pour notre class Nurse
        App\Entity\Nurse:
            # On utilise le meilleur algo présent sur la machine
            algorithm: auto


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #users_in_memory: { memory: null }
                # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            # Nos users sont detype Entité Doctrine
            entity:
                # Dont la classe est celle-ci
                class: App\Entity\Nurse
                # La propriété "de connexion/d'affichage"
                property: email
        # used to reload user from session & other features (e.g. switch_user)


    firewalls:

        # put it before all your other firewall API entries
        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            

        login:
            pattern: ^/api/login
            stateless: true
            json_login:        
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure


        # Règles où le JWT doit s'appliquer
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # access to login for anonymous to connect
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # then when the user is authenticated, acces to the api
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # ...
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        # ...

    
